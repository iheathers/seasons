{"version":3,"sources":["ScreenDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","winter","text","iconName","summer","ScreenDisplay","props","latitude","month","season","Date","getMonth","className","Spinner","console","log","message","defaultProps","App","state","errorMessage","navigator","geolocation","getCurrentPosition","position","setState","coords","error","this","getRenderContent","React","Component","ReactDOM","render","document","getElementById"],"mappings":"+LAGMA,G,MAAe,CACjBC,OAAQ,CACJC,KAAM,qBACNC,SAAU,aAEdC,OAAQ,CACJF,KAAM,uBACNC,SAAU,SAyBHE,EAbO,SAACC,GACnB,IATeC,EAAUC,EASnBC,GATSF,EASUD,EAAMC,UATNC,GASgB,IAAIE,MAAOC,YARxC,GAAKH,EAAQ,EACdD,EAAW,EAAI,SAAW,SAE1BA,EAAW,EAAI,SAAW,UAIR,EAEJP,EAAaS,GAA/BP,EAFsB,EAEtBA,KAAMC,EAFgB,EAEhBA,SAEb,OACI,yBAAKS,UAAS,yBAAoBH,IAC9B,uBAAGG,UAAS,4BAAuBT,EAAvB,WACZ,4BAAKD,GACL,uBAAGU,UAAS,6BAAwBT,EAAxB,aC5BlBU,EAAU,SAACP,GAEf,OADEQ,QAAQC,IAAIT,GAGV,yBAAKM,UAAU,oBACb,yBAAKA,UAAU,0BAA0BN,EAAMU,WAMvDH,EAAQI,aAAe,CACnBD,QAAS,cAGEH,QCZTK,E,4MACJC,MAAQ,CAAEZ,SAAU,KAAMa,aAAc,M,kEAEnB,IAAD,OAClBC,UAAUC,YAAYC,oBACpB,SAACC,GACC,EAAKC,SAAS,CAAElB,SAAUiB,EAASE,OAAOnB,cAE5C,SAACoB,GACC,EAAKF,SAAS,CAAEL,aAAcO,EAAMX,e,yCAMxC,OAAIY,KAAKT,MAAMZ,WAAaqB,KAAKT,MAAMC,aAC9B,kBAAC,EAAD,CAAeb,SAAUqB,KAAKT,MAAMZ,YAGxCqB,KAAKT,MAAMZ,UAAYqB,KAAKT,MAAMC,aAC9B,uCAAaQ,KAAKT,MAAMC,cAG1B,kBAAC,EAAD,CAASJ,QAAQ,qC,+BAIxB,OAAO,6BAAMY,KAAKC,wB,GA3BJC,IAAMC,WA+BxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.6161f2ed.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './ScreenDisplay.css';\r\n\r\nconst seasonConfig = {\r\n    winter: {\r\n        text: \"Burr, it's chilly!\",\r\n        iconName: \"snowflake\"\r\n    },\r\n    summer: {\r\n        text: \"Let's hit the beach!\",\r\n        iconName: \"sun\"\r\n    }\r\n}\r\n\r\nconst getSeason = (latitude, month) => {\r\n    if (month > 2 && month < 9){\r\n        return latitude > 0 ? \"summer\" : \"winter\"\r\n    } else {\r\n        return latitude > 0 ? \"winter\" : \"summer\"\r\n    }\r\n}\r\n\r\nconst ScreenDisplay = (props) => {\r\n    const season = getSeason(props.latitude, new Date().getMonth())\r\n    const {text, iconName} = seasonConfig[season]\r\n\r\n    return (\r\n        <div className={`screen-display ${season}`}>\r\n            <i className={`icon-left massive ${iconName} icon`}></i>\r\n            <h1>{text}</h1>\r\n            <i className={`icon-right massive ${iconName} icon`}></i>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ScreenDisplay;","import React from \"react\";\r\n\r\nconst Spinner = (props) => {\r\n    console.log(props)\r\n  return (\r\n   \r\n      <div className=\"ui active dimmer\">\r\n        <div className=\"ui massive text loader\">{props.message}</div>\r\n      </div>\r\n    \r\n  );\r\n};\r\n\r\nSpinner.defaultProps = {\r\n    message: \"Loading...\"\r\n}\r\n\r\nexport default Spinner;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport ScreenDisplay from \"./ScreenDisplay\";\r\nimport Spinner from \"./Spinner\";\r\n\r\nclass App extends React.Component {\r\n  state = { latitude: null, errorMessage: null };\r\n\r\n  componentDidMount() {\r\n    navigator.geolocation.getCurrentPosition(\r\n      (position) => {\r\n        this.setState({ latitude: position.coords.latitude });\r\n      },\r\n      (error) => {\r\n        this.setState({ errorMessage: error.message });\r\n      }\r\n    );\r\n  } \r\n\r\n  getRenderContent() {\r\n    if (this.state.latitude && !this.state.errorMessage) {\r\n      return <ScreenDisplay latitude={this.state.latitude} />;\r\n    }\r\n\r\n    if (!this.state.latitude && this.state.errorMessage) {\r\n      return <div>Error: {this.state.errorMessage}</div>;\r\n    }\r\n\r\n    return <Spinner message=\"Please accept location request\" />;\r\n  }\r\n\r\n  render() {\r\n    return <div>{this.getRenderContent()}</div>;\r\n  }\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}